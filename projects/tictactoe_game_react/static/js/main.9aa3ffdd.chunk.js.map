{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","props","className","onClick","value","Board","i","this","squares","renderSquare","renderRow","React","Component","Game","state","history","Array","fill","changedSquare","stepNumber","xIsNext","movesArray","highlightedMove","ascendingSequence","gameWithComputer","levelOfDifficulty","handleClick","bind","slice","length","removeHighlightOfSquare","numOfSquare","arrNumOfSquare","push","calculateWinner","setState","concat","step","removeHighlightWinnerSquare","highlightSquare","document","getElementsByClassName","classList","add","highlightedSquare","remove","winnerArrey","allSquaresArr","j","gameBoard","highlightedSquares","from","querySelector","current","charInCells","moveDone","winnerCombinations","forEach","item","numberOfX","numberOfO","numberOfNulls","index","array","computerMove","status","winner","sequenceOfSteps","moves","map","move","desc","getCoord","key","jumpTo","reverse","arrayWinner","highlightWinnerSquare","freeCellCheck","enableGameWithComputer","enableGameWithPlayer","ReactDOM","render","getElementById","a","b","c","numb","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9aa3ffdd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\n\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    renderRow(i) {\n        return (\n            <div className=\"board-row\">\n                {this.renderSquare(i)}\n                {this.renderSquare(i + 1)}\n                {this.renderSquare(i + 2)}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {this.renderRow(0)}\n                {this.renderRow(3)}\n                {this.renderRow(6)}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                { \n                    squares: Array(9).fill(null),\n                    changedSquare: null\n                }\n            ],\n            stepNumber: 0,\n            xIsNext: true,\n            movesArray: [],\n            highlightedMove: null,\n            ascendingSequence: true,\n            gameWithComputer: true,\n            levelOfDifficulty: 'light',\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        this.removeHighlightOfSquare();\n\n        const numOfSquare = i;\n        const arrNumOfSquare = this.state.movesArray.slice();\n        arrNumOfSquare.push(numOfSquare);\n\n        if (calculateWinner(squares)[0] || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                changedSquare: i\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n            movesArray: arrNumOfSquare,\n        });\n    }\n\n    jumpTo(step) {\n        this.removeHighlightWinnerSquare();\n        this.removeHighlightOfSquare();\n\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n        this.highlightSquare(step);\n    }\n\n    highlightSquare(step) {\n        if (step < 1) {\n            return;\n        }\n        const gameBoard = document.getElementsByClassName('game-board')[0];\n        const allSquaresArr = gameBoard.getElementsByClassName('square');\n        const changedSquare = allSquaresArr[this.state.history[step].changedSquare];\n\n        changedSquare.classList.add('highlighted-square');\n    }\n\n    removeHighlightOfSquare() {\n        const gameBoard = document.getElementsByClassName('game-board')[0];\n        const highlightedSquare = gameBoard.getElementsByClassName('highlighted-square')[0];\n        \n        if (highlightedSquare) {\n            highlightedSquare.classList.remove('highlighted-square');\n        }\n    }\n\n    highlightWinnerSquare(winnerArrey) {\n        const gameBoard = document.getElementsByClassName('game-board')[0];\n        const allSquaresArr = gameBoard.getElementsByClassName('square');\n\n        for (let i = 0; i < allSquaresArr.length; i++) {\n            for (let j = 0; j < winnerArrey.length; j++) {\n                if (i === winnerArrey[j]) {\n                    allSquaresArr[i].classList.add('highlighted-winner-square');\n                }\n            }\n        }\n    }\n\n    removeHighlightWinnerSquare() {\n        const gameBoard = document.getElementsByClassName('game-board')[0];\n        const highlightedSquares = Array.from(gameBoard.getElementsByClassName('highlighted-winner-square'));\n\n        if (highlightedSquares[0]) {\n            for(let i = 0; i < highlightedSquares.length; i++) {\n                highlightedSquares[i].classList.remove('highlighted-winner-square');\n            }\n        }\n    }\n\n    enableGameWithComputer(levelOfDifficulty) {\n        this.setState({\n            history: [\n                { \n                    squares: Array(9).fill(null),\n                    changedSquare: null\n                }\n            ],\n            stepNumber: 0,\n            xIsNext: true,\n            movesArray: [],\n            highlightedMove: null,\n            ascendingSequence: true,\n            gameWithComputer: true,\n            levelOfDifficulty: levelOfDifficulty,\n        });\n\n        document.querySelector('.player-vs-player').classList.remove('player-active');\n\n        if (levelOfDifficulty === 'light') {\n            document.querySelector('.player-vs-computer-light').classList.add('player-active');\n            document.querySelector('.player-vs-computer-medium').classList.remove('player-active');\n            document.querySelector('.player-vs-computer-hard').classList.remove('player-active');\n        } else if (levelOfDifficulty === 'medium') {\n            document.querySelector('.player-vs-computer-light').classList.remove('player-active');\n            document.querySelector('.player-vs-computer-medium').classList.add('player-active');\n            document.querySelector('.player-vs-computer-hard').classList.remove('player-active');\n        } else if (levelOfDifficulty === 'hard') {\n            document.querySelector('.player-vs-computer-light').classList.remove('player-active');\n            document.querySelector('.player-vs-computer-medium').classList.remove('player-active');\n            document.querySelector('.player-vs-computer-hard').classList.add('player-active');\n        }\n        this.removeHighlightWinnerSquare();\n        this.removeHighlightOfSquare();\n    }\n\n    enableGameWithPlayer(levelOfDifficulty) {\n        this.setState({\n            history: [\n                { \n                    squares: Array(9).fill(null),\n                    changedSquare: null\n                }\n            ],\n            stepNumber: 0,\n            xIsNext: true,\n            movesArray: [],\n            highlightedMove: null,\n            ascendingSequence: true,\n            gameWithComputer: false,\n            levelOfDifficulty: levelOfDifficulty,\n        });\n\n        document.querySelector('.player-vs-computer-light').classList.remove('player-active');\n        document.querySelector('.player-vs-computer-medium').classList.remove('player-active');\n        document.querySelector('.player-vs-computer-hard').classList.remove('player-active');\n        document.querySelector('.player-vs-player').classList.add('player-active');\n        this.removeHighlightWinnerSquare();\n        this.removeHighlightOfSquare();\n    }\n\n    computerMove(handleClick) {\n        if (this.state.gameWithComputer) {\n            if (!this.state.xIsNext) {\n                let current = this.state.history[this.state.history.length - 1].squares;\n                let charInCells = [];\n                let moveDone = false;\n\n                winnerCombinations.forEach(\n                    function(item) {\n                        let numberOfX = 0;\n                        let numberOfO = 0;\n                        let numberOfNulls = 0;\n\n                        for (let i = 0; i < 3; i++) {\n                            if (current[item[i]] === \"X\") {\n                                numberOfX += 1;\n                            } else if (current[item[i]] === \"O\") {\n                                numberOfO += 1;\n                            } else if (current[item[i]] === null) {\n                                numberOfNulls += 1;\n                            }\n                        }\n                        charInCells.push([numberOfX, numberOfO, numberOfNulls]);\n                    }\n                );\n                \n                charInCells.forEach(\n                    function(item, index, array) {\n                            if (item[0] === 0 && item[1] === 2 && item[2] === 1) {\n                                for (let i = 0; i < 3; i++) {\n                                    if (current[winnerCombinations[index][i]] === null) {\n                                        handleClick(winnerCombinations[index][i]);\n                                        moveDone = true;\n                                    }\n                                }\n                            }\n                    }\n                );\n\n                if (moveDone === true) {\n                    return;\n                }\n\n                if (this.state.levelOfDifficulty === 'medium' || this.state.levelOfDifficulty === 'hard') {\n                    charInCells.forEach(\n                        function(item, index, array) {\n                                if (item[0] === 2 && item[1] === 0 && item[2] === 1) {\n                                    for (let i = 0; i < 3; i++) {\n                                        if (current[winnerCombinations[index][i]] === null) {\n                                            handleClick(winnerCombinations[index][i]);\n                                            moveDone = true;\n                                        }\n                                    }\n                                }\n                        }\n                    );\n                }\n\n                if (moveDone === true) {\n                    return;\n                }\n\n                if (this.state.levelOfDifficulty === 'hard') {\n                    charInCells.forEach(\n                        function(item, index, array) {\n                                if (item[0] === 1 && item[1] === 0 && item[2] === 2) {\n                                    for (let i = 0; i < 3; i++) {\n                                        if (current[winnerCombinations[index][i]] === null) {\n                                            handleClick(winnerCombinations[index][i]);\n                                            moveDone = true;\n                                        }\n                                    }\n                                }\n                        }\n                    );\n                }\n\n                if (moveDone === true) {\n                    return;\n                }\n\n                charInCells.forEach(\n                    function(item, index, array) {\n                            if (item[0] === 0 && item[1] === 1 && item[2] === 2) {\n                                for (let i = 0; i < 3; i++) {\n                                    if (current[winnerCombinations[index][i]] === null) {\n                                        handleClick(winnerCombinations[index][i]);\n                                        moveDone = true;\n                                    }\n                                }\n                            }\n                    }\n                );\n\n                if (moveDone === true) {\n                    return;\n                }\n\n                charInCells.forEach(\n                    function(item, index, array) {\n                            if (item[0] === 0 && item[1] === 0 && item[2] === 3) {\n                                for (let i = 0; i < 3; i++) {\n                                    if (current[winnerCombinations[index][i]] === null) {\n                                        handleClick(winnerCombinations[index][i]);\n                                        moveDone = true;\n                                    }\n                                }\n                            }\n                    }\n                );\n\n                if (moveDone === true) {\n                    return;\n                }\n\n                charInCells.forEach(\n                    function(item, index, array) {\n                        for (let i = 0; i < 3; i++) {\n                            if (current[winnerCombinations[index][i]] === null) {\n                                handleClick(winnerCombinations[index][i]);\n                                moveDone = true;\n                            }\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    componentDidUpdate() {\n        this.computerMove(this.handleClick);\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares)[0];\n        let sequenceOfSteps = \"Сортировать ходы по убыванию\";\n\n        let moves = history.map((step, move) => {\n            const desc = move ?\n                `Перейти к ходу № ${move} (Кол: ${getCoord(this.state.movesArray[move - 1])[0]}, Cтр: ${getCoord(this.state.movesArray[move - 1])[1]})` :\n                'К началу игры';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        if (!this.state.ascendingSequence) {\n            moves = moves.reverse();\n            sequenceOfSteps = \"Сортировать ходы по возрастанию\";\n        }\n\n        let status;\n        if (winner) {\n            const arrayWinner = calculateWinner(current.squares)[1];\n\n            this.highlightWinnerSquare(arrayWinner);\n            status = 'Выиграл ' + winner;\n        } else if (freeCellCheck(current.squares)) {\n            status = 'Следующий ход: ' + (this.state.xIsNext ? 'X' : 'O');\n        } else {\n            status = 'Ничья';\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"type-of-game\">\n                    <h3>ВЫБЕРИТЕ РЕЖИМ ИГРЫ:</h3>\n                    <div className=\"type-of-game-buttons\">\n                        <button className=\"player-vs-computer-light player-active\" onClick={() => this.enableGameWithComputer('light')}>\n                            Легкий\n                        </button>\n                        <button className=\"player-vs-computer-medium\" onClick={() => this.enableGameWithComputer('medium')}>\n                            Средний\n                        </button>\n                        <button className=\"player-vs-computer-hard\" onClick={() => this.enableGameWithComputer('hard')}>\n                            Сложный\n                        </button>\n                        <button className=\"player-vs-player\" onClick={() => this.enableGameWithPlayer(null)}>\n                            Игра с другом\n                        </button>\n                    </div>\n                </div>\n                <div className=\"new-game\">\n                    <button className=\"new-game-button\" onClick={() => this.jumpTo(0)}>Новая Игра</button>\n                </div>\n                <div className=\"game-status\">{status}</div>\n                <div className=\"game-main\">\n                    <div className=\"game-board\">\n                        <Board\n                            squares={current.squares}\n                            onClick={(i) => this.handleClick(i)}\n                        />\n                    </div>\n                    <div className=\"game-info\">\n                        <h3>ИСТОРИЯ ХОДОВ</h3>\n                        <button className=\"sorting\" onClick={() => this.setState({\n                            ascendingSequence: !this.state.ascendingSequence,\n                        })}>{sequenceOfSteps}</button>\n                        <ol>{moves}</ol>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\n\n\n\n//OPTIMIZE====OPTIMIZE====OPTIMIZE====OPTIMIZE====OPTIMIZE====OPTIMIZE====OPTIMIZE====OPTIMIZE====\nconst winnerCombinations = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n];\n\nfunction calculateWinner(squares) {\n    const winnerCombinations = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < winnerCombinations.length; i++) {\n        const [a, b, c] = winnerCombinations[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return [squares[a], winnerCombinations[i]];\n        }\n    }\n    return [null];\n}\n\nfunction getCoord(numb) {\n    //in coord array:\n    //first number - number of columns;\n    //second number: number of rows;\n    //third number: number of squares;\n    const coord = [\n        [1, 1, 0],\n        [2, 1, 1],\n        [3, 1, 2],\n        [1, 2, 3],\n        [2, 2, 4],\n        [3, 2, 5],\n        [1, 3, 6],\n        [2, 3, 7],\n        [3, 3, 8],\n    ];\n\n    return coord[numb];\n}\n\nfunction freeCellCheck(squares) {\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] == null) {\n            return true;\n        }\n    }\n    return false;\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}