{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","props","className","onClick","value","Board","i","this","squares","renderSquare","renderRow","React","Component","Game","state","history","Array","fill","changedSquare","stepNumber","xIsNext","movesArray","highlightedMove","ascendingSequence","slice","length","removeHighlightOfSquare","numOfSquare","arrNumOfSquare","push","calculateWinner","setState","concat","step","removeHighlightWinnerSquare","highlightSquare","document","getElementsByClassName","classList","add","highlightedSquare","remove","winnerArrey","allSquaresArr","j","gameBoard","highlightedSquares","from","status","current","winner","sequenceOfSteps","moves","map","move","desc","getCoord","key","jumpTo","reverse","arrayWinner","highlightWinnerSquare","freeCellCheck","handleClick","lines","a","b","c","numb","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7859f1d2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\n\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    renderRow(i) {\n        return (\n            <div className=\"board-row\">\n                {this.renderSquare(i)}\n                {this.renderSquare(i + 1)}\n                {this.renderSquare(i + 2)}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {this.renderRow(0)}\n                {this.renderRow(3)}\n                {this.renderRow(6)}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                { \n                    squares: Array(9).fill(null),\n                    changedSquare: null\n                }\n            ],\n            stepNumber: 0,\n            xIsNext: true,\n            movesArray: [],\n            highlightedMove: null,\n            ascendingSequence: true,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        this.removeHighlightOfSquare();\n\n        const numOfSquare = i;\n        const arrNumOfSquare = this.state.movesArray.slice();\n        arrNumOfSquare.push(numOfSquare);\n\n        if (calculateWinner(squares)[0] || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                changedSquare: i\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n            movesArray: arrNumOfSquare,\n        });\n    }\n\n    jumpTo(step) {\n        this.removeHighlightWinnerSquare();\n        this.removeHighlightOfSquare();\n\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n        this.highlightSquare(step);\n    }\n\n    highlightSquare(step) {\n        if (step < 1) {\n            return;\n        }\n        const gameBoard = document.getElementsByClassName('game-board')[0];\n        const allSquaresArr = gameBoard.getElementsByClassName('square');\n        const changedSquare = allSquaresArr[this.state.history[step].changedSquare];\n\n        changedSquare.classList.add('highlighted-square');\n    }\n\n    removeHighlightOfSquare() {\n        const gameBoard = document.getElementsByClassName('game-board')[0];\n        const highlightedSquare = gameBoard.getElementsByClassName('highlighted-square')[0];\n        \n        if (highlightedSquare) {\n            highlightedSquare.classList.remove('highlighted-square');\n        }\n    }\n\n    highlightWinnerSquare(winnerArrey) {\n        const gameBoard = document.getElementsByClassName('game-board')[0];\n        const allSquaresArr = gameBoard.getElementsByClassName('square');\n\n        for (let i = 0; i < allSquaresArr.length; i++) {\n            for (let j = 0; j < winnerArrey.length; j++) {\n                if (i === winnerArrey[j]) {\n                    allSquaresArr[i].classList.add('highlighted-winner-square');\n                }\n            }\n        }\n    }\n\n    removeHighlightWinnerSquare() {\n        const gameBoard = document.getElementsByClassName('game-board')[0];\n        const highlightedSquares = Array.from(gameBoard.getElementsByClassName('highlighted-winner-square'));\n\n        if (highlightedSquares[0]) {\n            for(let i = 0; i < highlightedSquares.length; i++) {\n                highlightedSquares[i].classList.remove('highlighted-winner-square');\n            }\n        }\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares)[0];\n        let sequenceOfSteps = \"Сортировать ходы по убыванию\";\n\n        let moves = history.map((step, move) => {\n            const desc = move ?\n                `Перейти к ходу № ${move} (Кол: ${getCoord(this.state.movesArray[move - 1])[0]}, Cтр: ${getCoord(this.state.movesArray[move - 1])[1]})` :\n                'К началу игры';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        if (!this.state.ascendingSequence) {\n            moves = moves.reverse();\n            sequenceOfSteps = \"Сортировать ходы по возрастанию\";\n        }\n\n        let status;\n        if (winner) {\n            const arrayWinner = calculateWinner(current.squares)[1];\n\n            this.highlightWinnerSquare(arrayWinner);\n            status = 'Выиграл ' + winner;\n        } else if (freeCellCheck(current.squares)) {\n            status = 'Следующий ход: ' + (this.state.xIsNext ? 'X' : 'O');\n        } else {\n            status = 'Ничья';\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-status\">{status}</div>\n                <div className=\"game-main\">\n                    <div className=\"game-board\">\n                        <Board\n                            squares={current.squares}\n                            onClick={(i) => this.handleClick(i)}\n                        />\n                    </div>\n                    <div className=\"game-info\">\n                        <button className=\"sorting\" onClick={() => this.setState({\n                            ascendingSequence: !this.state.ascendingSequence,\n                        })}>{sequenceOfSteps}</button>\n                        <ol>{moves}</ol>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return [squares[a], lines[i]];\n        }\n    }\n    return [null];\n}\n\nfunction getCoord(numb) {\n    //in coord array:\n    //first number - number of columns;\n    //second number: number of rows;\n    //third number: number of squares;\n    const coord = [\n        [1, 1, 0],\n        [2, 1, 1],\n        [3, 1, 2],\n        [1, 2, 3],\n        [2, 2, 4],\n        [3, 2, 5],\n        [1, 3, 6],\n        [2, 3, 7],\n        [3, 3, 8],\n    ];\n\n    return coord[numb];\n}\n\nfunction freeCellCheck(squares) {\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] == null) {\n            return true;\n        }\n    }\n    return false;\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}